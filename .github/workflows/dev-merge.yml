on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  if_merged:
    env:
      DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
      OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
      OPTIMISTIC_ETHERSCAN_API_KEY: ${{ secrets.OPTIMISTIC_ETHERSCAN_API_KEY }}
      GOERLI_RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
      ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          submodules: recursive
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install submodules
        run: git submodule update --init

      - name: Install yarn dependencies
        run: yarn

      - name: Run forge install
        run: forge install

      - run: |
          set -e

          last_tag=$(git describe --tags --abbrev=0)

          git branch last_tag_branch $last_tag
          git switch last_tag_branch

          last_tag_badges=$(cat src/Badges.sol)
          last_tag_raft=$(cat src/Raft.sol)
          last_tag_sdh=$(cat src/SpecDataHolder.sol)

          git switch dev

          current_badges=$(cat src/Badges.sol)
          current_raft=$(cat src/Raft.sol)
          current_sdh=$(cat src/SpecDataHolder.sol)

          networks=(
            { name: "optimism-goerli", rpc_url: $OPTIMISM_GOERLI_RPC_URL, etherscan_api_key: $OPTIMISTIC_ETHERSCAN_API_KEY },
            { name: "goerli", rpc_url: $GOERLI_RPC_URL, etherscan_api_key: $GOERLI_ETHERSCAN_API_KEY },
            { name: "optimism", rpc_url: $OPTIMISM_RPC_URL, etherscan_api_key: $OPTIMISTIC_ETHERSCAN_API_KEY },
          )

          for network in "${networks[@]}"; do
            last_tag_badges=$(cat src/Badges.sol)
            last_tag_raft=$(cat src/Raft.sol)
            last_tag_sdh=$(cat src/SpecDataHolder.sol)

            if [ "$last_tag_badges" != "$current_badges" ]; then
              badgesImplementation=$(forge create src/Badges.sol:Badges --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "${network[rpc_url]}" --etherscan-api-key "${network[etherscan_api_key]}" | grep "Deployed to:" | cut -d " " -f 3) || {
                echo "Failed to deploy the new Badges implementation on ${network[name]}"
                exit 1
              }
              node scripts/createProposal.js "$badgesImplementation" 'badges' "${network[name]}" || {
                echo "Failed to create a proposal for the new Badges implementation on ${network[name]}"
                exit 1
              }
            fi

            if [ "$last_tag_raft" != "$current_raft" ]; then
              raftImplementation=$(forge create src/Raft.sol:Raft --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "${network[rpc_url]}" --etherscan-api-key "${network[etherscan_api_key]}" | grep "Deployed to:" | cut -d " " -f 3) || {
                echo "Failed to deploy the new Raft implementation on ${network[name]}"
                exit 1
              }
              node scripts/createProposal.js "$raftImplementation" 'raft' "${network[name]}" || {
                echo "Failed to create a proposal for the new Raft implementation on ${network[name]}"
                exit 1
              }
            fi

            if [ "$last_tag_sdh" != "$current_sdh" ]; then
              sdhImplementation=$(forge create src/SpecDataHolder.sol:SpecDataHolder --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "${network[rpc_url]}" --etherscan-api-key "${network[etherscan_api_key]}" | grep "Deployed to:" | cut -d " " -f 3) || {
                echo "Failed to deploy the new SpecDataHolder implementation on ${network[name]}"
                exit 1
              }
              node scripts/createProposal.js "$sdhImplementation" 'specDataHolder' "${network[name]}" || {
                echo "Failed to create a proposal for the new SpecDataHolder implementation on ${network[name]}"
                exit 1
              }
            }

            echo "All implementations deployed successfully on ${network[name]}"
          done
