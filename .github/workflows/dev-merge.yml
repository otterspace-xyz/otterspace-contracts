on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  deploy_to_testnets_on_merge:
    env:
      DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
      OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
      OPTIMISTIC_ETHERSCAN_API_KEY: ${{ secrets.OPTIMISTIC_ETHERSCAN_API_KEY }}
      GOERLI_RPC_URL: ${{ secrets.GOERLI_RPC_URL }}
      ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      DEFENDER_TEAM_API_KEY: ${{ secrets.DEFENDER_TEAM_API_KEY }}
      DEFENDER_TEAM_API_SECRET_KEY: ${{ secrets.DEFENDER_TEAM_API_SECRET_KEY }}
      GOERLI_BADGES_ADDRESS: ${{ secrets.GOERLI_BADGES_ADDRESS }}
      GOERLI_RAFT_ADDRESS: ${{ secrets.GOERLI_RAFT_ADDRESS }}
      GOERLI_GNOSIS_SAFE: ${{ secrets.GOERLI_GNOSIS_SAFE }}
      GOERLI_SPECDATAHOLDER_ADDRESS: ${{ secrets.GOERLI_SPECDATAHOLDER_ADDRESS }}
      OPTIMISM_GOERLI_RPC_URL: ${{ secrets.OPTIMISM_GOERLI_RPC_URL }}
      OPTIMISM_GOERLI_BADGES_ADDRESS: ${{ secrets.OPTIMISM_GOERLI_BADGES_ADDRESS }}
      OPTIMISM_GOERLI_RAFT_ADDRESS: ${{ secrets.OPTIMISM_GOERLI_RAFT_ADDRESS }}
      OPTIMISM_GOERLI_SPECDATAHOLDER_ADDRESS: ${{ secrets.OPTIMISM_GOERLI_SPECDATAHOLDER_ADDRESS }}
    if: github.event.pull_request.merged == true
    runs-on: alpine-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install submodules
        run: git submodule update --init

      - name: Install yarn dependencies
        run: yarn

      - name: Run forge install
        run: forge install

      - name: Deploy
        run: |
          set -e

          function get_code_at_ref() {
            git show "$1":src/Badges.sol
            git show "$1":src/Raft.sol
            git show "$1":src/SpecDataHolder.sol
          }

          function switch_branch() {
            local branch_name="$1"
            local ref="$2"
            git switch -c "$branch_name" "$ref" || git switch "$branch_name"
          }

          function create_proposal() {
            local implementation="$1"
            local name="$2"

            node scripts/createProposal.js "$implementation" 'badges' "$name" || {
              echo "Failed to create a proposal for the new Badges implementation on $name"
              exit 1
            }
          }

          last_tag=$(git describe --tags --abbrev=0)
          git_branch=$last_tag
          switch_branch "$git_branch" "$last_tag"

          # Get the code at the last tag and the current HEAD
          IFS=$'\n' read -r -d '' badges_code_at_last_tag raft_code_at_last_tag sdh_code_at_last_tag < <(get_code_at_ref "$last_tag" && printf '\0')
          IFS=$'\n' read -r -d '' badges_code_at_current raft_code_at_current sdh_code_at_current < <(get_code_at_ref "HEAD" && printf '\0')

          git switch dev

          declare -A networks=(
              ["goerli"]="$GOERLI_RPC_URL $ETHERSCAN_API_KEY"
              ["optimism-goerli"]="$OPTIMISM_GOERLI_RPC_URL $OPTIMISTIC_ETHERSCAN_API_KEY"         
          )

          for name in "${!networks[@]}"; do
              read rpc_url etherscan_api_key <<<"${networks[$name]}"
              if [ "$badges_code_at_last_tag" != "$badges_code_at_current" ]; then
                  badgesImplementation=$(forge create src/Badges.sol:Badges --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "$rpc_url" --etherscan-api-key "$etherscan_api_key" --gas-limit 2000000 | grep "Deployed to:" | cut -d " " -f 3) || {
                      echo "Failed to deploy the new Badges implementation on $name"
                      exit 1
                  }

                  create_proposal "$badgesImplementation" "$name"
              fi

              if [ "$raft_code_at_last_tag" != "$raft_code_at_current" ]; then
                  raftImplementation=$(forge create src/Raft.sol:Raft --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "$rpc_url" --etherscan-api-key "$etherscan_api_key" --gas-limit 2000000 | grep "Deployed to:" | cut -d " " -f 3) || {
                      echo "Failed to deploy the new Raft implementation on $name"
                      exit 1
                  }
                  create_proposal "$raftImplementation" "$name"
              fi

              if [ "$sdh_code_at_last_tag" != "$sdh_code_at_current" ]; then
                  sdhImplementation=$(forge create src/SpecDataHolder.sol:SpecDataHolder --private-key "$DEPLOYER_PRIVATE_KEY" --verify --rpc-url "$rpc_url" --etherscan-api-key "$etherscan_api_key" --gas-limit 2000000 | grep "Deployed to:" | cut -d " " -f 3) || {
                      echo "Failed to deploy the new SpecDataHolder implementation on $name"
                      exit 1
                  }
                  create_proposal "$sdhImplementation" "$name"
              fi

              echo "All implementations deployed successfully on $name"
          done
